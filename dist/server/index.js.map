{"version":3,"file":"index.js","sources":["../../server/src/config/index.ts","../../server/src/middlewares/blurhashProcessor.ts","../../server/src/middlewares/index.ts","../../server/src/bootstrap.ts","../../server/src/register.ts","../../server/src/index.ts"],"sourcesContent":["import type { Config } from '../types';\n\nexport const PLUGIN_NAME = 'blurhash';\nexport const SUPPORTED_MIMES = [\n  'image/png',\n  'image/jpeg',\n  'image/jpg',\n  'image/avif',\n  'image/webp',\n  'image/svg',\n  'image/gif',\n];\n\nexport default {\n  default: {\n    regenerateOnUpdate: false,\n    forceRegenerateOnUpdate: false,\n    flatten: false,\n    flattenColor: 'white',\n  },\n  validator: (config: Config) => {\n    const { flatten, flattenColor: bg, forceRegenerateOnUpdate, regenerateOnUpdate } = config || {};\n    if (typeof regenerateOnUpdate !== 'boolean') {\n      throw new Error('regenerateOnUpdate has to be a boolean');\n    }\n    if (typeof forceRegenerateOnUpdate !== 'boolean') {\n      throw new Error('forceRegenerateOnUpdate has to be a boolean');\n    }\n    if (typeof flatten !== 'boolean') {\n      throw new Error('flatten has to be a boolean');\n    }\n\n    if (flatten && bg) {\n      if (typeof bg === 'object') {\n        const bgValTypes = [];\n        Object.keys(bg).forEach((k) => bgValTypes.push(typeof bg[k] === 'number'));\n        if (bgValTypes.includes(false)) {\n          throw new Error('flattenColor attributes should be number');\n        }\n      }\n\n      if (!((typeof bg).match(/(string|object|undefined)/) || bg === null)) {\n        throw new Error('flattenColor not a valid Color Format');\n      }\n    }\n  },\n};\n","import sharp from 'sharp';\nimport axios from 'axios';\nimport type { Core } from '@strapi/strapi';\nimport type { Files, File } from 'formidable';\nimport type { Config, ColorConfig } from '../types';\nimport { PLUGIN_NAME, SUPPORTED_MIMES } from '../config';\n\ntype ColorContext = (color?: ColorConfig | string | null) => {\n  background: ColorConfig | string;\n};\n\nconst getColor: ColorContext = (color) => {\n  if (color && (typeof color === 'object' || typeof color === 'string')) {\n    return { background: color };\n  }\n  return { background: 'white' };\n};\n\nconst fetchBuffer = async (url: string) => {\n  const response = await axios.get(url, { responseType: 'arraybuffer' });\n  const arrayBuffer = response.data;\n  return arrayBuffer;\n};\n\nconst sharpBlurhashProcessor = async (file: string | ArrayBuffer, opt: Config) => {\n  try {\n    const preprocess = sharp(file).ensureAlpha().resize(32, 32, { fit: 'inside' });\n    const raw = !opt.flatten\n      ? preprocess.raw()\n      : preprocess.flatten(getColor(opt?.flattenColor)).raw();\n\n    const { data: pixels, info: metadata } = await raw.toBuffer({ resolveWithObject: true });\n    preprocess.destroy();\n    return { pixels, metadata };\n  } catch (e) {\n    throw e;\n  }\n};\n\ninterface GenerateProps {\n  file?: File;\n  url?: string;\n  ctx: any;\n}\nconst generateBlurhash = async (strapi: Core.Strapi, { file, url, ctx }: GenerateProps) => {\n  try {\n    const { config } = strapi.plugin(PLUGIN_NAME);\n    const opt: Config = {\n      flatten: config('flatten'),\n      flattenColor: config('flattenColor'),\n    };\n\n    const sharpFile = url ? await fetchBuffer(url) : file.filepath;\n    if (!sharpFile) throw Error('Not A Valid File Data!');\n\n    const { metadata, pixels } = await sharpBlurhashProcessor(sharpFile, opt);\n    const { width, height } = metadata || {};\n\n    const Thumbhash = await import('thumbhash');\n    const blurBuffer = Thumbhash.rgbaToThumbHash(width, height, Buffer.from(pixels));\n    const blurhash = Buffer.from(blurBuffer).toString('base64') || '';\n    ctx.state.blurhash = blurhash;\n    return blurhash;\n  } catch (e) {\n    throw e;\n  }\n};\n\nconst blurhashHandler = async (strapi: Core.Strapi, file: File, ctx) => {\n  const { mimetype, originalFilename: name } = file;\n  const isSupported = mimetype && SUPPORTED_MIMES.includes(mimetype);\n  if (!isSupported) return;\n  const blurhash = await generateBlurhash(strapi, { file, ctx });\n  if (!blurhash) return;\n  strapi.log.info(`Blurhash for ${name} generated successfully: ${blurhash}`);\n};\n\nconst processUpload = async (strapi: Core.Strapi, ctx) => {\n  const files = ctx.request.files as Files;\n  for (const key in files) {\n    if (!Array.isArray(files[key])) {\n      await blurhashHandler(strapi, files[key] as unknown as File, ctx);\n    } else {\n      for (const file of files[key]) {\n        await blurhashHandler(strapi, file, ctx);\n      }\n    }\n  }\n};\n\nconst processUpdate = async (strapi: Core.Strapi, ctx) => {\n  // Replace/Upload new Image, means regenerate blurhash\n  const isNewFile = ctx.request?.files && Object.keys(ctx.request.files).length > 0;\n  if (isNewFile) return processUpload(strapi, ctx);\n\n  // Update Media without changing image\n  const { config } = strapi.plugin(PLUGIN_NAME);\n  const regenerateOnUpdate = config('regenerateOnUpdate');\n  const forceRegenerateOnUpdate = config('forceRegenerateOnUpdate');\n\n  if (forceRegenerateOnUpdate || regenerateOnUpdate) {\n    const idParam = (ctx.URL as URL).searchParams.get('id') || null;\n    const fullData = await strapi.db.query('plugin::upload.file').findOne({\n      select: ['url', 'blurhash', 'name', 'mime'],\n      where: { id: parseInt(idParam) },\n    });\n\n    const { mime, name, blurhash, url } = fullData || {};\n    const isSupported = mime && SUPPORTED_MIMES.includes(mime);\n    const isNeedUpdate = forceRegenerateOnUpdate || !blurhash;\n    if (!(isNeedUpdate && isSupported)) return;\n\n    // Generate Blurhash from Saved URL\n    const newBlurhash = await generateBlurhash(strapi, { url, ctx });\n    if (!newBlurhash) return;\n    strapi.log.info(`Re-generate blurhash for ${name}: ${newBlurhash}`);\n  }\n};\n\nconst blurhashProcessor = (strapi: Core.Strapi): Core.MiddlewareHandler => {\n  return async (ctx, next) => {\n    const { body, method, url, files } = ctx.request;\n    const isRequest = !!(body && method === 'POST' && body.fileInfo);\n    try {\n      const isNewUpload = url === '/upload' && files && isRequest;\n      const isUpdateMedia = url.startsWith('/upload?id=') && isRequest;\n      if (isNewUpload) await processUpload(strapi, ctx);\n      else if (isUpdateMedia) await processUpdate(strapi, ctx);\n    } catch (e) {\n      strapi.log.error('Error While Generating Blurhash', e);\n    }\n    await next();\n  };\n};\n\nexport default blurhashProcessor;\n","import blurhashProcessor from './blurhashProcessor';\n\nexport default {\n  blurhashProcessor,\n};\n","import { Core } from '@strapi/strapi';\nimport { SUPPORTED_MIMES } from './config';\nimport middlewares from './middlewares';\n\n// Assign Blurhash from Middelware to the record\nconst blurhashHandler = async (strapi: Core.Strapi, event) => {\n  const { blurhash } = strapi.requestContext.get().state; // value from middleware\n  const { data } = event.params;\n  const isSupported = data.mime && SUPPORTED_MIMES.includes(data.mime);\n  if (!isSupported && blurhash) return;\n  data.blurhash = blurhash;\n};\n\nconst bootstrap = ({ strapi }: { strapi: Core.Strapi }) => {\n  strapi.db.lifecycles.subscribe({\n    models: ['plugin::upload.file'],\n    beforeCreate: (event) => blurhashHandler(strapi, event),\n    beforeUpdate: (event) => blurhashHandler(strapi, event),\n  });\n\n  strapi.server.use(middlewares.blurhashProcessor(strapi));\n};\n\nexport default bootstrap;\n","import type { Core, Schema } from '@strapi/strapi';\n\ninterface FileAttr extends Schema.ContentTypes {\n  attributes: { blurhash: { type: string } };\n}\n\nconst register = ({ strapi }: { strapi: Core.Strapi }) => {\n  const fileData = strapi.plugin('upload').contentTypes.file as unknown as FileAttr;\n  if (!fileData) return;\n  fileData.attributes.blurhash = { type: 'text' };\n};\n\nexport default register;\n","/**\n * Application methods\n */\nimport bootstrap from './bootstrap';\nimport register from './register';\n\n/**\n * Plugin server methods\n */\nimport config from './config';\n\nexport default {\n  register,\n  bootstrap,\n  config,\n};\n"],"names":["config","axios","sharp","blurhashHandler"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEO,MAAM,cAAc;AACpB,MAAM,kBAAkB;AAAA,EAC7B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AAEA,MAAe,SAAA;AAAA,EACb,SAAS;AAAA,IACP,oBAAoB;AAAA,IACpB,yBAAyB;AAAA,IACzB,SAAS;AAAA,IACT,cAAc;AAAA,EAChB;AAAA,EACA,WAAW,CAACA,YAAmB;AACvB,UAAA,EAAE,SAAS,cAAc,IAAI,yBAAyB,mBAAmB,IAAIA,WAAU,CAAC;AAC1F,QAAA,OAAO,uBAAuB,WAAW;AACrC,YAAA,IAAI,MAAM,wCAAwC;AAAA,IAAA;AAEtD,QAAA,OAAO,4BAA4B,WAAW;AAC1C,YAAA,IAAI,MAAM,6CAA6C;AAAA,IAAA;AAE3D,QAAA,OAAO,YAAY,WAAW;AAC1B,YAAA,IAAI,MAAM,6BAA6B;AAAA,IAAA;AAG/C,QAAI,WAAW,IAAI;AACb,UAAA,OAAO,OAAO,UAAU;AAC1B,cAAM,aAAa,CAAC;AACpB,eAAO,KAAK,EAAE,EAAE,QAAQ,CAAC,MAAM,WAAW,KAAK,OAAO,GAAG,CAAC,MAAM,QAAQ,CAAC;AACrE,YAAA,WAAW,SAAS,KAAK,GAAG;AACxB,gBAAA,IAAI,MAAM,0CAA0C;AAAA,QAAA;AAAA,MAC5D;AAGF,UAAI,GAAG,OAAO,IAAI,MAAM,2BAA2B,KAAK,OAAO,OAAO;AAC9D,cAAA,IAAI,MAAM,uCAAuC;AAAA,MAAA;AAAA,IACzD;AAAA,EACF;AAEJ;ACnCA,MAAM,WAAyB,CAAC,UAAU;AACxC,MAAI,UAAU,OAAO,UAAU,YAAY,OAAO,UAAU,WAAW;AAC9D,WAAA,EAAE,YAAY,MAAM;AAAA,EAAA;AAEtB,SAAA,EAAE,YAAY,QAAQ;AAC/B;AAEA,MAAM,cAAc,OAAO,QAAgB;AACnC,QAAA,WAAW,MAAMC,uBAAM,IAAI,KAAK,EAAE,cAAc,eAAe;AACrE,QAAM,cAAc,SAAS;AACtB,SAAA;AACT;AAEA,MAAM,yBAAyB,OAAO,MAA4B,QAAgB;AAC5E,MAAA;AACF,UAAM,aAAaC,eAAAA,QAAM,IAAI,EAAE,YAAY,EAAE,OAAO,IAAI,IAAI,EAAE,KAAK,SAAA,CAAU;AAC7E,UAAM,MAAM,CAAC,IAAI,UACb,WAAW,IAAI,IACf,WAAW,QAAQ,SAAS,KAAK,YAAY,CAAC,EAAE,IAAI;AAExD,UAAM,EAAE,MAAM,QAAQ,MAAM,SAAS,IAAI,MAAM,IAAI,SAAS,EAAE,mBAAmB,KAAA,CAAM;AACvF,eAAW,QAAQ;AACZ,WAAA,EAAE,QAAQ,SAAS;AAAA,WACnB,GAAG;AACJ,UAAA;AAAA,EAAA;AAEV;AAOA,MAAM,mBAAmB,OAAO,QAAqB,EAAE,MAAM,KAAK,UAAyB;AACrF,MAAA;AACF,UAAM,EAAE,QAAAF,QAAW,IAAA,OAAO,OAAO,WAAW;AAC5C,UAAM,MAAc;AAAA,MAClB,SAASA,QAAO,SAAS;AAAA,MACzB,cAAcA,QAAO,cAAc;AAAA,IACrC;AAEA,UAAM,YAAY,MAAM,MAAM,YAAY,GAAG,IAAI,KAAK;AACtD,QAAI,CAAC,UAAiB,OAAA,MAAM,wBAAwB;AAEpD,UAAM,EAAE,UAAU,OAAA,IAAW,MAAM,uBAAuB,WAAW,GAAG;AACxE,UAAM,EAAE,OAAO,OAAO,IAAI,YAAY,CAAC;AAEjC,UAAA,YAAY,MAAM,OAAO,WAAW;AACpC,UAAA,aAAa,UAAU,gBAAgB,OAAO,QAAQ,OAAO,KAAK,MAAM,CAAC;AAC/E,UAAM,WAAW,OAAO,KAAK,UAAU,EAAE,SAAS,QAAQ,KAAK;AAC/D,QAAI,MAAM,WAAW;AACd,WAAA;AAAA,WACA,GAAG;AACJ,UAAA;AAAA,EAAA;AAEV;AAEA,MAAMG,oBAAkB,OAAO,QAAqB,MAAY,QAAQ;AACtE,QAAM,EAAE,UAAU,kBAAkB,KAAS,IAAA;AAC7C,QAAM,cAAc,YAAY,gBAAgB,SAAS,QAAQ;AACjE,MAAI,CAAC,YAAa;AAClB,QAAM,WAAW,MAAM,iBAAiB,QAAQ,EAAE,MAAM,KAAK;AAC7D,MAAI,CAAC,SAAU;AACf,SAAO,IAAI,KAAK,gBAAgB,IAAI,4BAA4B,QAAQ,EAAE;AAC5E;AAEA,MAAM,gBAAgB,OAAO,QAAqB,QAAQ;AAClD,QAAA,QAAQ,IAAI,QAAQ;AAC1B,aAAW,OAAO,OAAO;AACvB,QAAI,CAAC,MAAM,QAAQ,MAAM,GAAG,CAAC,GAAG;AAC9B,YAAMA,kBAAgB,QAAQ,MAAM,GAAG,GAAsB,GAAG;AAAA,IAAA,OAC3D;AACM,iBAAA,QAAQ,MAAM,GAAG,GAAG;AACvB,cAAAA,kBAAgB,QAAQ,MAAM,GAAG;AAAA,MAAA;AAAA,IACzC;AAAA,EACF;AAEJ;AAEA,MAAM,gBAAgB,OAAO,QAAqB,QAAQ;AAElD,QAAA,YAAY,IAAI,SAAS,SAAS,OAAO,KAAK,IAAI,QAAQ,KAAK,EAAE,SAAS;AAChF,MAAI,UAAW,QAAO,cAAc,QAAQ,GAAG;AAG/C,QAAM,EAAE,QAAAH,QAAW,IAAA,OAAO,OAAO,WAAW;AACtC,QAAA,qBAAqBA,QAAO,oBAAoB;AAChD,QAAA,0BAA0BA,QAAO,yBAAyB;AAEhE,MAAI,2BAA2B,oBAAoB;AACjD,UAAM,UAAW,IAAI,IAAY,aAAa,IAAI,IAAI,KAAK;AAC3D,UAAM,WAAW,MAAM,OAAO,GAAG,MAAM,qBAAqB,EAAE,QAAQ;AAAA,MACpE,QAAQ,CAAC,OAAO,YAAY,QAAQ,MAAM;AAAA,MAC1C,OAAO,EAAE,IAAI,SAAS,OAAO,EAAE;AAAA,IAAA,CAChC;AAED,UAAM,EAAE,MAAM,MAAM,UAAU,IAAI,IAAI,YAAY,CAAC;AACnD,UAAM,cAAc,QAAQ,gBAAgB,SAAS,IAAI;AACnD,UAAA,eAAe,2BAA2B,CAAC;AAC7C,QAAA,EAAE,gBAAgB,aAAc;AAGpC,UAAM,cAAc,MAAM,iBAAiB,QAAQ,EAAE,KAAK,KAAK;AAC/D,QAAI,CAAC,YAAa;AAClB,WAAO,IAAI,KAAK,4BAA4B,IAAI,KAAK,WAAW,EAAE;AAAA,EAAA;AAEtE;AAEA,MAAM,oBAAoB,CAAC,WAAgD;AAClE,SAAA,OAAO,KAAK,SAAS;AAC1B,UAAM,EAAE,MAAM,QAAQ,KAAK,MAAA,IAAU,IAAI;AACzC,UAAM,YAAY,CAAC,EAAE,QAAQ,WAAW,UAAU,KAAK;AACnD,QAAA;AACI,YAAA,cAAc,QAAQ,aAAa,SAAS;AAClD,YAAM,gBAAgB,IAAI,WAAW,aAAa,KAAK;AACvD,UAAI,YAAa,OAAM,cAAc,QAAQ,GAAG;AAAA,eACvC,cAAe,OAAM,cAAc,QAAQ,GAAG;AAAA,aAChD,GAAG;AACH,aAAA,IAAI,MAAM,mCAAmC,CAAC;AAAA,IAAA;AAEvD,UAAM,KAAK;AAAA,EACb;AACF;ACnIA,MAAe,cAAA;AAAA,EACb;AACF;ACCA,MAAM,kBAAkB,OAAO,QAAqB,UAAU;AAC5D,QAAM,EAAE,SAAS,IAAI,OAAO,eAAe,IAAM,EAAA;AAC3C,QAAA,EAAE,SAAS,MAAM;AACvB,QAAM,cAAc,KAAK,QAAQ,gBAAgB,SAAS,KAAK,IAAI;AAC/D,MAAA,CAAC,eAAe,SAAU;AAC9B,OAAK,WAAW;AAClB;AAEA,MAAM,YAAY,CAAC,EAAE,aAAsC;AAClD,SAAA,GAAG,WAAW,UAAU;AAAA,IAC7B,QAAQ,CAAC,qBAAqB;AAAA,IAC9B,cAAc,CAAC,UAAU,gBAAgB,QAAQ,KAAK;AAAA,IACtD,cAAc,CAAC,UAAU,gBAAgB,QAAQ,KAAK;AAAA,EAAA,CACvD;AAED,SAAO,OAAO,IAAI,YAAY,kBAAkB,MAAM,CAAC;AACzD;ACfA,MAAM,WAAW,CAAC,EAAE,aAAsC;AACxD,QAAM,WAAW,OAAO,OAAO,QAAQ,EAAE,aAAa;AACtD,MAAI,CAAC,SAAU;AACf,WAAS,WAAW,WAAW,EAAE,MAAM,OAAO;AAChD;ACCA,MAAe,QAAA;AAAA,EACb;AAAA,EACA;AAAA,EACA;AACF;;"}